{"ast":null,"code":"// all of the other imports are attached to this keyword\nimport firebase from 'firebase/app'; // use to create Firebase instance\n\nimport 'firebase/firestore'; // for the database\n\nimport 'firebase/auth'; // for the auth\n\nimport FIREBASE_CONFIG from './firebase.config';\nconst config = FIREBASE_CONFIG; //  take our user from auth and store it inot our database\n// api request therefore async\n\nexport const createuserProfileDocument = async (userAuth, additionalData) => {\n  // cehck for a valid object\n  if (!userAuth) {\n    return;\n  } // doc lets us do crud operations\n\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // console.log(userAuth);\n  // console.log(snapShot);\n  // if it doesn't exsists create user on database\n\n  if (!snapShot.exists) {\n    // properties we want to save\n    const {\n      displayName,\n      email\n    } = userAuth; // current date and time when this is saved\n\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } // for future reference for us\n\n\n  return userRef;\n};\nexport const convertCollectionsSnapShotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config); // initialize\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/xavi/fullstack/react-crown-clothing/src/firebase/firebase.utils.js"],"names":["firebase","FIREBASE_CONFIG","config","createuserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","convertCollectionsSnapShotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","id","reduce","accumulator","collection","toLowerCase","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,cAArB,C,CAAqC;;AACrC,OAAO,oBAAP,C,CAA6B;;AAC7B,OAAO,eAAP,C,CAAwB;;AACxB,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,MAAMC,MAAM,GAAGD,eAAf,C,CAEA;AACA;;AACA,OAAO,MAAME,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC5E;AACA,MAAI,CAACD,QAAL,EAAe;AACd;AACA,GAJ2E,CAM5E;;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CAT4E,CAU5E;AACA;AAEA;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACrB;AACA,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B,CAFqB,CAGrB;;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACH,YAAMV,OAAO,CAACW,GAAR,CAAY;AACjBJ,QAAAA,WADiB;AAEjBC,QAAAA,KAFiB;AAGjBC,QAAAA,SAHiB;AAIjB,WAAGV;AAJc,OAAZ,CAAN;AAMA,KAPD,CAOE,OAAOa,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACA;AACD,GA9B2E,CA+B5E;;;AACA,SAAOf,OAAP;AACA,CAjCM;AAmCP,OAAO,MAAMgB,+BAA+B,GAAIC,WAAD,IAAiB;AAC/D,QAAMC,qBAAqB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAsBlB,GAAD,IAAS;AAC3D,UAAM;AAAEmB,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBpB,GAAG,CAACqB,IAAJ,EAAzB;AAEA,WAAO;AACNC,MAAAA,SAAS,EAAEC,SAAS,CAACJ,KAAD,CADd;AAENK,MAAAA,EAAE,EAAExB,GAAG,CAACwB,EAFF;AAGNL,MAAAA,KAHM;AAINC,MAAAA;AAJM,KAAP;AAMA,GAT6B,CAA9B;AAWA,SAAOJ,qBAAqB,CAACS,MAAtB,CAA6B,CAACC,WAAD,EAAcC,UAAd,KAA6B;AAChED,IAAAA,WAAW,CAACC,UAAU,CAACR,KAAX,CAAiBS,WAAjB,EAAD,CAAX,GAA8CD,UAA9C;AACA,WAAOD,WAAP;AACA,GAHM,EAGJ,EAHI,CAAP;AAIA,CAhBM;AAkBPlC,QAAQ,CAACqC,aAAT,CAAuBnC,MAAvB,E,CAEA;;AACA,OAAO,MAAMoC,IAAI,GAAGtC,QAAQ,CAACsC,IAAT,EAAb;AACP,OAAO,MAAM/B,SAAS,GAAGP,QAAQ,CAACO,SAAT,EAAlB;AAEP,MAAMgC,QAAQ,GAAG,IAAIvC,QAAQ,CAACsC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAevC,QAAf","sourcesContent":["// all of the other imports are attached to this keyword\nimport firebase from 'firebase/app'; // use to create Firebase instance\nimport 'firebase/firestore'; // for the database\nimport 'firebase/auth'; // for the auth\nimport FIREBASE_CONFIG from './firebase.config';\n\nconst config = FIREBASE_CONFIG;\n\n//  take our user from auth and store it inot our database\n// api request therefore async\nexport const createuserProfileDocument = async (userAuth, additionalData) => {\n\t// cehck for a valid object\n\tif (!userAuth) {\n\t\treturn;\n\t}\n\n\t// doc lets us do crud operations\n\tconst userRef = firestore.doc(`users/${userAuth.uid}`);\n\n\tconst snapShot = await userRef.get();\n\t// console.log(userAuth);\n\t// console.log(snapShot);\n\n\t// if it doesn't exsists create user on database\n\tif (!snapShot.exists) {\n\t\t// properties we want to save\n\t\tconst { displayName, email } = userAuth;\n\t\t// current date and time when this is saved\n\t\tconst createdAt = new Date();\n\n\t\ttry {\n\t\t\tawait userRef.set({\n\t\t\t\tdisplayName,\n\t\t\t\temail,\n\t\t\t\tcreatedAt,\n\t\t\t\t...additionalData,\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log('error creating user', error.message);\n\t\t}\n\t}\n\t// for future reference for us\n\treturn userRef;\n};\n\nexport const convertCollectionsSnapShotToMap = (collections) => {\n\tconst transformedCollection = collections.docs.map((doc) => {\n\t\tconst { title, items } = doc.data();\n\n\t\treturn {\n\t\t\trouteName: encodeURI(title),\n\t\t\tid: doc.id,\n\t\t\ttitle,\n\t\t\titems,\n\t\t};\n\t});\n\n\treturn transformedCollection.reduce((accumulator, collection) => {\n\t\taccumulator[collection.title.toLowerCase()] = collection;\n\t\treturn accumulator;\n\t}, {});\n};\n\nfirebase.initializeApp(config);\n\n// initialize\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}