{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { CHECK_USER_SESSION, EMAIL_SIGN_IN_START, GOOGLE_SIGN_IN_START, SIGN_OUT_START, SIGN_UP_START, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user.actions';\nimport { auth, googleProvider, createuserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createuserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  // api call\n  try {\n    // we want access to useRef that's why we call it signInWithPopup here instead from utils\n    // keep try and catch signInwithPopup might fail\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    // check to see if a user has authenticated\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password); // after signing up, call action signUpCess that tricles up calling signInAfterSignUp\n\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(SIGN_UP_START, signUp);\n} // if sign up succedes then this gets called and we sing up\n\nexport function* onSignUpSuccess() {\n  yield takeLatest(SIGN_UP_SUCCESS, signInAFterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/home/xavi/fullstack/react-crown-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","CHECK_USER_SESSION","EMAIL_SIGN_IN_START","GOOGLE_SIGN_IN_START","SIGN_OUT_START","SIGN_UP_START","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","auth","googleProvider","createuserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onEmailSignInStart","onGoogleSignInStart","onCheckUserSession","onSignOutStart","onSignUpStart","onSignUpSuccess","signInAFterSignUp","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport {\n\tCHECK_USER_SESSION,\n\tEMAIL_SIGN_IN_START,\n\tGOOGLE_SIGN_IN_START,\n\tSIGN_OUT_START,\n\tSIGN_UP_START,\n\tSIGN_UP_SUCCESS,\n\tSIGN_UP_FAILURE,\n} from './user.types';\n\nimport {\n\tsignInSuccess,\n\tsignInFailure,\n\tsignOutSuccess,\n\tsignOutFailure,\n\tsignUpFailure,\n\tsignUpSuccess,\n} from './user.actions';\n\nimport {\n\tauth,\n\tgoogleProvider,\n\tcreateuserProfileDocument,\n\tgetCurrentUser,\n} from '../../firebase/firebase.utils';\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n\ttry {\n\t\tconst userRef = yield call(\n\t\t\tcreateuserProfileDocument,\n\t\t\tuserAuth,\n\t\t\tadditionalData\n\t\t);\n\t\tconst userSnapshot = yield userRef.get();\n\t\tyield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n\t} catch (error) {\n\t\tyield put(signInFailure(error));\n\t}\n}\n\nexport function* signInWithGoogle() {\n\t// api call\n\ttry {\n\t\t// we want access to useRef that's why we call it signInWithPopup here instead from utils\n\t\t// keep try and catch signInwithPopup might fail\n\t\tconst { user } = yield auth.signInWithPopup(googleProvider);\n\t\tyield getSnapshotFromUserAuth(user);\n\t} catch (error) {\n\t\tyield put(signInFailure(error));\n\t}\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n\ttry {\n\t\tconst { user } = yield auth.signInWithEmailAndPassword(email, password);\n\t\tyield getSnapshotFromUserAuth(user);\n\t} catch (error) {\n\t\tyield put(signInFailure(error));\n\t}\n}\n\nexport function* isUserAuthenticated() {\n\ttry {\n\t\t// check to see if a user has authenticated\n\t\tconst userAuth = yield getCurrentUser();\n\t\tif (!userAuth) return;\n\t\tyield getSnapshotFromUserAuth(userAuth);\n\t} catch (error) {\n\t\tyield put(signInFailure(error));\n\t}\n}\n\nexport function* signOut() {\n\ttry {\n\t\tyield auth.signOut();\n\t\tyield put(signOutSuccess());\n\t} catch (error) {\n\t\tyield put(signOutFailure(error));\n\t}\n}\n\nexport function* signUp({ payload: { email, password, displayName } }) {\n\ttry {\n\t\tconst { user } = yield auth.createUserWithEmailAndPassword(email, password);\n\t\t// after signing up, call action signUpCess that tricles up calling signInAfterSignUp\n\t\tyield put(signUpSuccess({ user, additionalData: { displayName } }));\n\t} catch (error) {\n\t\tyield put(signUpFailure(error));\n\t}\n}\n\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\n\tyield getSnapshotFromUserAuth(user, additionalData);\n}\n\nexport function* onEmailSignInStart() {\n\tyield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onGoogleSignInStart() {\n\tyield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onCheckUserSession() {\n\tyield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onSignOutStart() {\n\tyield takeLatest(SIGN_OUT_START, signOut);\n}\n\nexport function* onSignUpStart() {\n\tyield takeLatest(SIGN_UP_START, signUp);\n}\n\n// if sign up succedes then this gets called and we sing up\nexport function* onSignUpSuccess() {\n\tyield takeLatest(SIGN_UP_SUCCESS, signInAFterSignUp);\n}\n\nexport function* userSagas() {\n\tyield all([\n\t\tcall(onGoogleSignInStart),\n\t\tcall(onEmailSignInStart),\n\t\tcall(isUserAuthenticated),\n\t\tcall(onSignOutStart),\n\t\tcall(onSignUpStart),\n\t\tcall(onSignUpSuccess),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}