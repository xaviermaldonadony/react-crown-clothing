{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { EMAIL_SIGN_IN_START, GOOGLE_SIGN_IN_START } from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { auth, googleProvider, createuserProfileDocument } from '../../firebase/firebase.utils';\nexport function* signInWithGoogle() {\n  // api call\n  try {\n    // we want access to useRef that's why we call it signInWithPopup here instead from utils\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createuserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createuserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/home/xavi/fullstack/react-crown-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","EMAIL_SIGN_IN_START","GOOGLE_SIGN_IN_START","signInSuccess","signInFailure","auth","googleProvider","createuserProfileDocument","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","googleSignInSuccess","id","data","error","googleSignInFailure","signInWithEmail","payload","email","password","signInWithEmailAndPassword","emailSignInSuccess","emailSignInFailure","onEmailSignInStart","onGoogleSignInStart","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,cAA1D;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,SACCC,IADD,EAECC,cAFD,EAGCC,yBAHD,QAIO,+BAJP;AAMA,OAAO,UAAUC,gBAAV,GAA6B;AACnC;AACA,MAAI;AACH;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMJ,IAAI,CAACK,eAAL,CAAqBJ,cAArB,CAAvB;AACA,UAAMK,OAAO,GAAG,MAAMX,IAAI,CAACO,yBAAD,EAA4BE,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMf,GAAG,CACRgB,mBAAmB,CAAC;AAAEC,MAAAA,EAAE,EAAEH,YAAY,CAACG,EAAnB;AAAuB,SAAGH,YAAY,CAACI,IAAb;AAA1B,KAAD,CADX,CAAT;AAGA,GARD,CAQE,OAAOC,KAAP,EAAc;AACf,UAAMnB,GAAG,CAACoB,mBAAmB,CAACD,KAAD,CAApB,CAAT;AACA;AACD;AAED,OAAO,UAAUE,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAClE,MAAI;AACH,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMJ,IAAI,CAACkB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMX,OAAO,GAAG,MAAMX,IAAI,CAACO,yBAAD,EAA4BE,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMf,GAAG,CACR0B,kBAAkB,CAAC;AAAET,MAAAA,EAAE,EAAEH,YAAY,CAACG,EAAnB;AAAuB,SAAGH,YAAY,CAACI,IAAb;AAA1B,KAAD,CADV,CAAT;AAGA,GAPD,CAOE,OAAOC,KAAP,EAAc;AACf,UAAMnB,GAAG,CAAC2B,kBAAkB,CAACR,KAAD,CAAnB,CAAT;AACA;AACD;AAED,OAAO,UAAUS,kBAAV,GAA+B;AACrC,QAAM7B,UAAU,CAACI,mBAAD,EAAsBkB,eAAtB,CAAhB;AACA;AAED,OAAO,UAAUQ,mBAAV,GAAgC;AACtC,QAAM9B,UAAU,CAACK,oBAAD,EAAuBM,gBAAvB,CAAhB;AACA;AAED,OAAO,UAAUoB,SAAV,GAAsB;AAC5B,QAAM7B,GAAG,CAAC,CAACC,IAAI,CAAC2B,mBAAD,CAAL,EAA4B3B,IAAI,CAAC0B,kBAAD,CAAhC,CAAD,CAAT;AACA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport { EMAIL_SIGN_IN_START, GOOGLE_SIGN_IN_START } from './user.types';\n\nimport { signInSuccess, signInFailure } from './user.actions';\n\nimport {\n\tauth,\n\tgoogleProvider,\n\tcreateuserProfileDocument,\n} from '../../firebase/firebase.utils';\n\nexport function* signInWithGoogle() {\n\t// api call\n\ttry {\n\t\t// we want access to useRef that's why we call it signInWithPopup here instead from utils\n\t\tconst { user } = yield auth.signInWithPopup(googleProvider);\n\t\tconst userRef = yield call(createuserProfileDocument, user);\n\t\tconst userSnapshot = yield userRef.get();\n\t\tyield put(\n\t\t\tgoogleSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\n\t\t);\n\t} catch (error) {\n\t\tyield put(googleSignInFailure(error));\n\t}\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n\ttry {\n\t\tconst { user } = yield auth.signInWithEmailAndPassword(email, password);\n\t\tconst userRef = yield call(createuserProfileDocument, user);\n\t\tconst userSnapshot = yield userRef.get();\n\t\tyield put(\n\t\t\temailSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\n\t\t);\n\t} catch (error) {\n\t\tyield put(emailSignInFailure(error));\n\t}\n}\n\nexport function* onEmailSignInStart() {\n\tyield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onGoogleSignInStart() {\n\tyield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* userSagas() {\n\tyield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}