{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { CHECK_USER_SESSION, EMAIL_SIGN_IN_START, GOOGLE_SIGN_IN_START, SIGN_OUT_START, SIGN_UP_START, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user.actions';\nimport { auth, googleProvider, createuserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createuserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  // api call\n  try {\n    // we want access to useRef that's why we call it signInWithPopup here instead from utils\n    // keep try and catch signInwithPopup might fail\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    // check to see if a user has authenticated\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    dispaly\n  }\n}) {\n  const {\n    user\n  } = yield auth.createUserWithEmailAndPassword(email, password);\n}\nexport function* onEmailSignInStart() {\n  try {\n    yield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n  } catch (error) {}\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/home/xavi/fullstack/react-crown-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","CHECK_USER_SESSION","EMAIL_SIGN_IN_START","GOOGLE_SIGN_IN_START","SIGN_OUT_START","SIGN_UP_START","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","signInSuccess","signInFailure","signOutSuccess","signOutFailure","auth","googleProvider","createuserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","dispaly","createUserWithEmailAndPassword","onEmailSignInStart","onGoogleSignInStart","onCheckUserSession","onSignOutStart","onSignUpStart","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport {\n\tCHECK_USER_SESSION,\n\tEMAIL_SIGN_IN_START,\n\tGOOGLE_SIGN_IN_START,\n\tSIGN_OUT_START,\n\tSIGN_UP_START,\n\tSIGN_UP_SUCCESS,\n\tSIGN_UP_FAILURE,\n} from './user.types';\n\nimport {\n\tsignInSuccess,\n\tsignInFailure,\n\tsignOutSuccess,\n\tsignOutFailure,\n} from './user.actions';\n\nimport {\n\tauth,\n\tgoogleProvider,\n\tcreateuserProfileDocument,\n\tgetCurrentUser,\n} from '../../firebase/firebase.utils';\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n\ttry {\n\t\tconst userRef = yield call(createuserProfileDocument, userAuth);\n\t\tconst userSnapshot = yield userRef.get();\n\t\tyield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n\t} catch (error) {\n\t\tyield put(signInFailure(error));\n\t}\n}\n\nexport function* signInWithGoogle() {\n\t// api call\n\ttry {\n\t\t// we want access to useRef that's why we call it signInWithPopup here instead from utils\n\t\t// keep try and catch signInwithPopup might fail\n\t\tconst { user } = yield auth.signInWithPopup(googleProvider);\n\t\tyield getSnapshotFromUserAuth(user);\n\t} catch (error) {\n\t\tyield put(signInFailure(error));\n\t}\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n\ttry {\n\t\tconst { user } = yield auth.signInWithEmailAndPassword(email, password);\n\t\tyield getSnapshotFromUserAuth(user);\n\t} catch (error) {\n\t\tyield put(signInFailure(error));\n\t}\n}\n\nexport function* isUserAuthenticated() {\n\ttry {\n\t\t// check to see if a user has authenticated\n\t\tconst userAuth = yield getCurrentUser();\n\t\tif (!userAuth) return;\n\t\tyield getSnapshotFromUserAuth(userAuth);\n\t} catch (error) {\n\t\tyield put(signInFailure(error));\n\t}\n}\n\nexport function* signOut() {\n\ttry {\n\t\tyield auth.signOut();\n\t\tyield put(signOutSuccess());\n\t} catch (error) {\n\t\tyield put(signOutFailure(error));\n\t}\n}\n\nexport function* signUp({ payload: { email, password, dispaly } }) {\n\tconst { user } = yield auth.createUserWithEmailAndPassword(email, password);\n}\n\nexport function* onEmailSignInStart() {\n\ttry {\n\t\tyield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n\t} catch (error) {}\n}\n\nexport function* onGoogleSignInStart() {\n\tyield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onCheckUserSession() {\n\tyield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onSignOutStart() {\n\tyield takeLatest(SIGN_OUT_START, signOut);\n}\n\nexport function* onSignUpStart() {\n\tyield takeLatest(SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n\tyield all([\n\t\tcall(onGoogleSignInStart),\n\t\tcall(onEmailSignInStart),\n\t\tcall(isUserAuthenticated),\n\t\tcall(onSignOutStart),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}